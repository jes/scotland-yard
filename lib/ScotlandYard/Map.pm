package ScotlandYard::Map;

use strict;
use warnings;

# list of edges in the graph; specify each edge with the lowest-numbered station first
# to avoid duplicates

my %EDGES = (
    underground => [qw(
        1-46 13-46 13-67 13-89 46-74 46-79 67-79 67-89 67-111 79-93 79-111 89-128 89-140
        111-153 111-163 128-140 128-185 140-153 153-185 153-163
    )],
    bus => [qw(
        1-46 1-58 3-22 3-23 7-42 13-14 13-23 13-52 14-15 15-29 15-41 22-23 22-34
        22-65 23-67 29-41 29-42 29-55 34-46 34-63 41-52 41-87 42-72 46-58 46-78
        52-67 52-86 55-89 58-74 58-77 63-65 63-79 63-100 65-67 65-82 67-82 67-102
        72-105 72-107 74-94 77-78 77-94 77-124 78-79 82-100 82-140 86-87 86-102
        86-116 87-105 89-105 93-94 100-111 102-127 105-107 105-108 107-161 108-116
        108-135 111-124 116-127 116-142 122-123 122-144 123-124 123-165 123-144
        124-153 127-133 128-135 128-142 128-161 128-187 128-199 133-140 133-157
        135-161 140-154 140-156 142-157 144-163 153-154 153-180 153-184 154-156
        156-157 156-184 157-185 161-199 163-176 163-191 165-180 165-191 176-190
        180-184 180-190 184-185 185-187 190-191
    )],
    taxi => [qw(
        1-8 1-9 2-10 2-20 3-4 3-11 3-12 5-15 5-16 6-7 6-29 7-17 8-18 8-19 9-19 9-20
        10-11 10-21 10-34 11-22 12-23 13-23 13-24 14-15 14-25 15-16 15-26 15-28 16-28 16-29
        17-29 17-30 18-31 18-43 19-32 20-33 21-33 22-23 22-34 22-35 23-37 24-37 24-38 25-38
        25-39 26-27 26-39 27-40 28-41 29-41 29-42 30-42 31-43 31-44 32-33 32-44 32-45 33-46
        34-47 34-48 35-36 35-48 35-65 36-37 36-49 37-50 38-50 38-51 39-51 39-52 40-41
        40-52 40-53 41-54 42-56 42-72 43-57 44-58 45-46 45-58 45-60 46-47 46-61 47-62
        48-62 48-63 49-50 49-66 51-52 51-67 51-68 52-69 53-54 53-69 54-55 54-70 55-71
        56-91 57-58 57-73 58-59 58-74 59-75 60-61 60-76 61-62 61-76 61-78 62-79 63-64 63-79
        63-80 64-65 64-81 65-66 65-82 66-67 66-82 67-68 67-84 68-69 68-85 69-86 70-71
        70-87 71-72 71-89 72-90 72-91 73-92 73-74 74-75 74-92 75-94 76-77 77-78 77-95
        77-96 78-79 78-97 79-98 80-99 80-100 81-82 81-100 82-101 83-101 83-102 84-85
        85-103 86-103 86-104 87-88 88-89 88-117 89-105 90-91 90-105 91-107 92-93 93-94
        94-95 95-122 96-97 96-109 97-98 97-109 98-99 98-110 99-110 99-112 100-101 100-112
        100-113 101-114 102-103 102-115 104-116 105-106 105-108 106-107 107-119 108-117
        108-119 109-110 109-124 110-111 111-112 111-124 112-125 113-114 113-125 114-115
        114-126 114-131 114-132 115-126 115-127 116-117 116-118 116-127 117-129 118-129
        118-134 118-142 119-136 120-121 120-144 121-122 121-145 122-123 122-146 123-124
        123-137 123-148 123-149 124-130 124-138 125-131 126-127 126-140 127-133 127-134 128-142
        128-143 128-160 128-172 128-188 129-135 129-142 129-143 130-131 130-139 132-140
        133-140 133-141 134-141 134-142 135-136 135-143 135-161 136-162 137-147 138-150
        138-152 139-140 139-153 139-154 140-154 140-156 141-142 142-158 142-143 142-158
        143-160 144-145 144-177 145-146 146-147 146-163 147-164 148-149 148-164 149-150
        149-165 150-151 151-152 151-165 151-166 152-153 153-154 153-166 153-167 154-155
        155-156 155-167 155-168 156-157 156-169 157-158 157-170 158-159 159-170 159-172
        159-186 159-198 160-161 160-173 161-174 162-175 163-177 163-178 164-178 164-179
        165-179 165-180 166-181 166-183 167-168 167-183 168-184 169-184 170-185 171-173
        171-175 171-199 172-187 173-174 173-188 174-175 176-177 176-189 178-189 178-191
        179-191 180-181 180-193 181-182 181-193 182-183 182-195 183-196 184-185 184-196
        184-197 185-186 186-198 187-188 187-198 188-199 189-190 190-191 190-192 191-192
        192-194 193-194 194-195 195-197 196-197 198-199
    )],
    ferry => [qw(
        108-115 115-157 157-194
    )],
);
my %ADJACENT;
for my $type (qw(underground bus taxi ferry)) {
    for my $edge (@{ $EDGES{$type} }) {
        my ($a, $b) = split /-/, $edge;
        $ADJACENT{$type}{$a}{$b} = 1;
        $ADJACENT{$type}{$b}{$a} = 1;
    }
}

sub can_travel {
    my ($pkg, $type, $a, $b) = @_;
    return $ADJACENT{$type}{$a}{$b} ? 1 : 0;
}

sub adjacent_stations {
    my ($pkg, $a) = @_;

    my @adj;

    for my $type (qw(taxi bus underground ferry)) {
        for my $b (keys %{ $ADJACENT{$type}{$a} }) {
            push @adj, {
                type => $type,
                station => $b,
            };
        }
    }

    return @adj;
}

sub transports {
    my ($pkg, $a, $b) = @_;
    my @types;
    for my $type (qw(taxi bus underground ferry)) {
        push @types, $type if $pkg->can_travel($type, $a, $b);
    }
    return @types;
}

1;
